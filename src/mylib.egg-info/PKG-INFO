Metadata-Version: 2.1
Name: mylib
Version: 1.1.1
Summary: "Utilities including credentials, error logging, and time conversion."
Home-page: https://github.com/drisen/mylib
Author: "Dennis Risen"
Author-email: "dar5@case.edu"
License: UNKNOWN
Project-URL: Bug Tracker, https://github.com/drisen/mylib/issues
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: Licence :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE

# mylib
Library of utilities for managing credentials, logging errors, and time conversions in a home_zone

- **credentials**`(system: str, username: str=None, interactive: bool = False) -> tuple`  
    returns the credentials for system/username.
    When called with interactive=True, prompts to allow the user to create the repository, add or update credentials
    in the repository.
- **Logging**
    - **logErr**`(*s, start:str='\n', end:str='', **kwargs)`  
      log join(timestamp and s) via email (unix) or print(**kwargs) (Windows)  
      -`logErr.logSubject = {the subject}`  
      -`logErr.logToAddr = [email addresses]`
    - **printIf** `(verbose: int, *s, start: str = '\n', end: str = '', **kwargs)`
      if Verbose>0, print timestamped *s
- **Time conversion** functions for handling various time formats presented in the
enterprise's home time zone
    - **anyToSecs**`(t, offset:float=0.0) -> float`  
      Converts milliseconds:int, seconds:float, or ISO datetime:str to seconds:float.
    - **fromTimeStamp**`(t: float) -> datetime:`
      datetime.datetime(t) with home time zone
    - **millisToSecs**`(millis:int, timeDelta:float=0) -> float`
      Convert epochMillis:int to float + timeDelta
    - **secsToMillis**`(t:float, timeDelta:float=0.0) -> int`  
      Convert to/from epochMilliseconds on foreign system from/to epochSeconds on local system
      with adjustment for local time ahead of foreign time by timeDelta seconds
    - **strfTime**`(t: object, fmt: str = '%Y-%m-%dT%H:%M:%S', millis: bool = False) -> str`  
      Format epochMillis:int or epochSeconds:float to configured **home_zone** 
      timezone, or pass-through a string.
    - **strpSecs**`(s:str) -> float ` 
      Parse ISO time text to UTC epochSeconds:float.


